events { }
http {
	server {
		################ HTTPS-specific ################
		# openssl genrsa -out server_rootCA.key 2048
		# openssl req -x509 -new -nodes -key server_rootCA.key -sha256 -days 3650 -out server_rootCA.pem

		# cat > server_rootCA.csr.cnf<< EOF
		# [req]
		# default_bits = 2048
		# prompt = no
		# default_md = sha256
		# distinguished_name = dn
		# [dn]
		# C=DE
		# ST=Berlin
		# L=NeuKoelln
		# O=Weisestrasse
		# OU=local_RootCA
		# emailAddress=admin@chat.bot
		# CN = chat.bot
		# EOF
		# openssl req -new -sha256 -nodes -out server.csr -newkey rsa:2048 -keyout server.key -config <( cat server_rootCA.csr.cnf )

		# cat > v3.ext<< EOF
		# authorityKeyIdentifier=keyid,issuer
		# basicConstraints=CA:FALSE
		# keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
		# subjectAltName = @alt_names
		# [alt_names]
		# DNS.1 = chat.bot
		# EOF
		# openssl x509 -req -in server.csr -CA server_rootCA.pem -CAkey server_rootCA.key -CAcreateserial -out server.crt -days 3650 -sha256 -extfile v3.ext

		# add rootCA.pem to chrome (manage certif > authorities)
		# sudo trust anchor --store server_rootCA.pem

		# listen 443 ssl;
		# server_name chat.bot;
		# ssl_certificate     server.crt;
		# ssl_certificate_key server.key;
		# ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
		# ssl_ciphers         HIGH:!aNULL:!MD5;
		listen 80;
		gzip on;
		gzip_types application/javascript application/json image/svg+xml;
		include mime.types; # needed for browser-acceptable css/js content-type
		root   html;
		# Use Cookie named "jwt" as Authorization Bearer
		set $auth "";
		if ($cookie_jwt) {
			set $auth "Bearer $cookie_jwt";
		}
		# redirect /api to postgrest
		location /api/ {
			proxy_set_header Authorization $auth;
			proxy_set_header Accept 'application/json';
			proxy_pass http://${POSTGREST_HOST}:${POSTGREST_PORT}/;
		}
		# postgrest only support /table?id=eq.42 syntax, let's create a /table/42 wrapper
		# that will match /user/joe but NOT match /rpc/funct
		location ~ ^/api/([^r][^p][^c][a-z_]*)/(.+) {
			proxy_set_header Authorization $auth;
			proxy_set_header Accept 'application/vnd.pgrst.object+json';
			proxy_pass http://${POSTGREST_HOST}:${POSTGREST_PORT}/$1?id=eq.$2;
		}
		# file-specific cases
		location = /worker.js {
			try_files $uri /static/worker.js;
		}
		location = /robots.txt {
			add_header Content-Type text/plain;
			return 200 "User-agent: *\nDisallow: \n";
		}
		# serve /static/ files (css, js, svg ...)
		location /static/ {
			expires 1y;
		}
		location /media/ {
			expires 1y;
		}
		# leave the rest to the SPA
		location / {
			try_files $uri /static/index.html;
		}

		location /offeren {
			proxy_pass http://${VOSK_EN_HOST}:${VOSK_EN_PORT}/offer;
		}
		location /offerth {
			proxy_pass http://${VOSK_TH_HOST}:${VOSK_TH_PORT}/offer;
		}
	}
}
