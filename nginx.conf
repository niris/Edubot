events { }
http {
	server {
		include mime.types; # needed for browser-acceptable css/js content-type
		root   html;
		# Use Cookie named "jwt" as Authorization Bearer
		set $auth "";
		if ($cookie_jwt) {
			set $auth "Bearer $cookie_jwt";
		}
		# redirect /api to postgrest
		location /api/ {
			proxy_set_header Authorization $auth;
			proxy_set_header Accept 'application/json';
			proxy_pass http://${POSTGREST_HOST}:${POSTGREST_PORT}/;
		}
		# postgrest only support /table?id=eq.42 syntax, let's create a /table/42 wrapper
		# that will match /user/joe but NOT match /rpc/funct
		location ~ ^/api/([^r][^p][^c][a-z_]*)/(.+) {
			proxy_set_header Authorization $auth;
			proxy_set_header Accept 'application/vnd.pgrst.object+json';
			proxy_pass http://${POSTGREST_HOST}:${POSTGREST_PORT}/$1?id=eq.$2;
		}
		# file-specific cases
		location = /worker.js {
			try_files $uri /static/worker.js;
		}
		location = /robots.txt {
			add_header Content-Type text/plain;
			return 200 "User-agent: *\nDisallow: \n";
		}
		# serve /static/ files (css, js, svg ...)
		location /static/ { }
		location /media/ { }
		# leave the rest to the SPA
		location / {
			try_files $uri /static/index.html;
		}
		location /offeren {
			proxy_pass http://${VOSK_EN_HOST}:${VOSK_EN_PORT}/offer;
		}

		location /offerth {
			proxy_pass http://${VOSK_TH_HOST}:${VOSK_TH_PORT}/offer;
		}
	}
}
