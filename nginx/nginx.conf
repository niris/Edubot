events { }
http {
	charset utf-8;
	map $http_upgrade $connection_upgrade {
		default upgrade;
		''      close;
	}
	server {
		listen 443 ssl http2;
		server_name home.yne.fr;
		ssl_certificate     fullchain.pem;
		ssl_certificate_key privkey.pem;
		ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
		ssl_ciphers         HIGH:!aNULL:!MD5;

		listen 80;
		gzip on;
		gzip_types application/javascript application/json image/svg+xml;
		include mime.types; # needed for browser-acceptable css/js content-type
		root   html;
		# Use Cookie named "jwt" as Authorization Bearer
		set $auth "";
		if ($cookie_jwt) {
			set $auth "Bearer $cookie_jwt";
		}
		# redirect /api to postgrest
		location /api/ {
			proxy_set_header Authorization $auth;
			proxy_set_header Accept 'application/json';
			proxy_pass ${PROXY_API};
		}
		# postgrest only support /table?id=eq.42 syntax, let's create a /table/42 wrapper
		# that will match /user/joe but NOT match /rpc/funct
		location ~ ^/api/([^r][^p][^c][a-z_]*)/(.+) {
			proxy_set_header Authorization $auth;
			proxy_set_header Accept 'application/vnd.pgrst.object+json';
			proxy_pass ${PROXY_API}$1?id=eq.$2;
		}
		location = /logout {
			add_header set-cookie "jwt=0; Path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT; HttpOnly";
			add_header set-cookie "id=0; Path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT;";
			add_header set-cookie "role=0; Path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT;";
			return 200 '"ok"';
		}
		# file-specific cases
		location = /worker.js {
			try_files $uri /static/worker.js;
		}
		location = /robots.txt {
			add_header Content-Type text/plain;
			return 200 "User-agent: *\nDisallow: \n";
		}
		location = /.well-known/assetlinks.json {
			add_header Cache-Control 'no-cache';
			return 200 '[{"relation": ["delegate_permission/common.handle_all_urls"],"target": {"namespace": "android_app","package_name": "app.anglizbot.twa","sha256_cert_fingerprints": ["97:F4:6E:42:95:38:7E:3E:49:28:D7:02:A2:BA:6E:A9:7C:A7:84:78:4F:0D:04:3D:3F:08:F6:2E:C2:6A:70:5E"]}}]';
		}
		location = / {
				try_files $uri /static/app.html;
		}

		# serve /static/ files (css, js, svg ...)
		location /static/ {
			autoindex on;
			autoindex_format json;
			expires 1y;
		}
		location /media/ {
			autoindex on;
			autoindex_format json;
			expires 1y;
		}

		location /stt {
			proxy_pass         ${PROXY_STT};
			proxy_http_version 1.1;
			proxy_set_header   Upgrade $http_upgrade;
			proxy_set_header   Connection "Upgrade";
			proxy_set_header   Host $host;
		}
		location /bot {
			proxy_pass ${PROXY_BOT};
		}
	}
}
